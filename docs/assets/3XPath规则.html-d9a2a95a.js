import{_ as n,r as i,o as s,c as l,a as e,d as t,e as d,b as r}from"./app-b63b8632.js";const o={},h=e("h1",{id:"编写xpath规则",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#编写xpath规则","aria-hidden":"true"},"#"),t(" 编写XPath规则")],-1),c={href:"https://docs.pmd-code.org/latest/pmd_userdocs_extending_your_first_rule.html",target:"_blank",rel:"noopener noreferrer"},p=e("h2",{id:"xpath版本",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#xpath版本","aria-hidden":"true"},"#"),t(" XPath版本")],-1),m=e("p",null,"​ PMD7中使用的是XPath3.1。之前版本使用的是XPath1.0，也可支持XPath2.0。",-1),x={href:"https://www.saxonica.com/html/documentation/expressions/xpath31new.html",target:"_blank",rel:"noopener noreferrer"},u=r('<p>​ XPathRule的version属性已经废弃，后续将会删除。</p><h2 id="ast的dom表示" tabindex="-1"><a class="header-anchor" href="#ast的dom表示" aria-hidden="true">#</a> AST的DOM表示</h2><p>​ XPath规则将AST视为类似XML的DOM结构，这也是XPath语言的定义基础。具体来说，这意味着：</p><ul><li>每个AST节点被视为一个XML元素。</li><li>该元素的本地名称是给定节点的 <code>getXPathNodeName</code> 的值。</li><li>一些Java的getter方法以XML属性的形式公开在这些元素上。</li></ul><p>这意味着，属性的文档可以在我们的Javadocs中找到。例如，Java节点 <code>EnumDeclaration</code> 的 <code>@SimpleName</code> 属性由Java的 <code>getSimpleName</code> 方法支持。</p><h2 id="值转换" tabindex="-1"><a class="header-anchor" href="#值转换" aria-hidden="true">#</a> 值转换</h2><p>​ 为了表示属性，我们必须将Java值映射到XPath数据模型（XDM）的值上。在下表中，我们将类型转换函数称为<code>conv</code>，该函数将java类型的字转换成XDM类型的字。</p><table><thead><tr><th style="text-align:left;">Java type <code>T</code></th><th style="text-align:left;">XSD type <code>conv(T)</code></th></tr></thead><tbody><tr><td style="text-align:left;"><code>int</code></td><td style="text-align:left;"><code>xs:integer</code></td></tr><tr><td style="text-align:left;"><code>long</code></td><td style="text-align:left;"><code>xs:integer</code></td></tr><tr><td style="text-align:left;"><code>double</code></td><td style="text-align:left;"><code>xs:decimal</code></td></tr><tr><td style="text-align:left;"><code>float</code></td><td style="text-align:left;"><code>xs:decimal</code></td></tr><tr><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;"><code>xs:boolean</code></td></tr><tr><td style="text-align:left;"><code>String</code></td><td style="text-align:left;"><code>xs:string</code></td></tr><tr><td style="text-align:left;"><code>Character</code></td><td style="text-align:left;"><code>xs:string</code></td></tr><tr><td style="text-align:left;"><code>Enum&lt;E&gt;</code></td><td style="text-align:left;"><code>xs:string</code> (uses <code>Object::toString</code>)</td></tr><tr><td style="text-align:left;"><code>List&lt;E&gt;</code></td><td style="text-align:left;"><code>conv(E)*</code> (a sequence type)</td></tr></tbody></table><pre><code>相同的`conv`函数也用于将规则属性值转换为XDM值。\n</code></pre><p>⚠️列表上的转换函数只支持规则properties，不支持attributes。</p><h2 id="rule-properties" tabindex="-1"><a class="header-anchor" href="#rule-properties" aria-hidden="true">#</a> Rule Properties</h2>',11),g={href:"https://docs.pmd-code.org/latest/pmd_userdocs_extending_defining_properties.html#for-xpath-rules",target:"_blank",rel:"noopener noreferrer"},f=r(`<h2 id="pmd扩展函数" tabindex="-1"><a class="header-anchor" href="#pmd扩展函数" aria-hidden="true">#</a> PMD扩展函数</h2><p>​ PMD提供了一些特定于语言的XPath函数，用于从AST中访问语义信息。</p><p>​ 在XPath 2.0中，必须明确提及自定义PMD函数的命名空间。</p><h3 id="所有语言" tabindex="-1"><a class="header-anchor" href="#所有语言" aria-hidden="true">#</a> 所有语言</h3><p>​ 所有语言都可以使用的函数位于命名空间 &quot;pmd&quot; 中。</p><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>fileName</td><td>返回当前文件的文件名。</td></tr><tr><td>startLine</td><td>返回给定节点的开始行。</td></tr><tr><td>endLine</td><td>返回给定节点的结束行。</td></tr><tr><td>startColumn</td><td>返回给定节点的还是列(包含)。</td></tr><tr><td>endColumn</td><td>返回给定节点的最后一列(不包含)。</td></tr></tbody></table><h4 id="filename" tabindex="-1"><a class="header-anchor" href="#filename" aria-hidden="true">#</a> fileName</h4><p>​ <em>pmd:<strong>fileName</strong>() as xs:string</em></p><p>​ **返回值：**返回一个文件的名称，不包含路径，包含扩展名。这可用于编写检查文件命名约定的规则。</p><p>​ 版本：PMD&gt;=6.38.0</p><p>​ **备注：**需要上下文为节点的时候这个函数才会生效。</p><p>​ **例子：**下面的表达式匹配的是Foo.xml文件中的&lt;b&gt;标签</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//b[pmd:fileName() = &#39;Foo.xml&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="sartline" tabindex="-1"><a class="header-anchor" href="#sartline" aria-hidden="true">#</a> sartLine</h4><p>​ <em>pmd:<strong>startLine</strong>(xs:element) as xs:int</em></p><p>​ **返回值：**返回节点内容是从文件的哪一行开始。行号从1开始。</p><p>​ **版本：**PMD&gt;=6.44.0</p><p>​ **备注：**这个函数不依赖上下文，而是将一个节点作为其第一个参数。</p><p>​ **参数：**一个元素节点。</p><p>​ **例子：**匹配第5行之后的&lt;b&gt;标签</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//b[pmd:startLine(.) &gt; 5]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="endline" tabindex="-1"><a class="header-anchor" href="#endline" aria-hidden="true">#</a> endLine</h4><p>​ <em>pmd:<strong>endLine</strong>(xs:element) as xs:int</em></p><p>​ **版本：**PMD&gt;=6.44.0</p><p>​ **返回值：**节点内容在文件中的结束位置。序号从1开始。</p><p>​ **备注：**这个函数不依赖上下文内容，但需要一个入场。</p><p>​ **参数：**任何一个元素节点。</p><p>​ **例子：**只在一行内定义的&lt;b&gt;标签。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//b[pmd:endLine(.) == pmd:startLine(.)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="startcolumn" tabindex="-1"><a class="header-anchor" href="#startcolumn" aria-hidden="true">#</a> startColumn</h4><p>​ <em>pmd:<strong>startColumn</strong>(xs:element) as xs:int</em></p><p>​ <strong>返回值:</strong> 返回节点在源文件中开始的列号。列号从1开始计数。开始列号是包括在内的。</p><p>​ <strong>版本：</strong> PMD&gt;=6.44.0</p><p>​ **备注：**这个函数不依赖上下文，而是将一个节点作为其第一个参数。</p><p>​ **参数：**一个元素节点。</p><p>​ **例子：**匹配定义在行首的&lt;b&gt;标签</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//b[pmd:startColumn(.) = 1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="endcolmun" tabindex="-1"><a class="header-anchor" href="#endcolmun" aria-hidden="true">#</a> endColmun</h4><p>​ <em>pmd:<strong>endColumn</strong>(xs:element) as xs:int</em></p><p>​ 返回值：返回节点在源文件中结束的列号。列号从1开始计数。结束列号是排除的。</p><p>​ <strong>版本：</strong> PMD&gt;=6.44.0</p><p>​ **备注：**这个函数不依赖上下文，而是将一个节点作为其第一个参数。</p><p>​ **参数：**一个元素节点。</p><p>​ **例子：**匹配跨越正好一个字符的任何 <code>&lt;b&gt;</code> 节点。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//b[pmd:startLine(.) = pmd:endLine(.) and pmd:endColumn(.) - pmd:startColumn(.) = 1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="java语言专属函数" tabindex="-1"><a class="header-anchor" href="#java语言专属函数" aria-hidden="true">#</a> java语言专属函数</h3><p>​ java函数的专用语言有pmd-java前缀。</p><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>nodels</td><td>测试节点实例的运行时类型。</td></tr><tr><td>typels</td><td>测试一个节点的静态类型。</td></tr><tr><td>typesExactly</td><td>测试一个节点的静态类型，忽略值类型。</td></tr><tr><td>metric</td><td>计算并返回度量的值。</td></tr><tr><td>hasAnnotation</td><td>测试当前节点是否有注解。</td></tr><tr><td>modifiers</td><td>生成节点的有效修饰符。</td></tr><tr><td>explicitModifiers</td><td>生成节点的显式修饰符。</td></tr><tr><td>matchesSig</td><td>匹配方法或构造函数调用的签名。</td></tr></tbody></table><p>🎗️typeOf函数目前已经陪废弃，可以使用typels或者typeIsExactly代替。这个函数已经在PMD7.0.0中移除。</p><h4 id="nodels" tabindex="-1"><a class="header-anchor" href="#nodels" aria-hidden="true">#</a> nodels</h4><h4 id="typels" tabindex="-1"><a class="header-anchor" href="#typels" aria-hidden="true">#</a> typels</h4><h4 id="typesexactly" tabindex="-1"><a class="header-anchor" href="#typesexactly" aria-hidden="true">#</a> typesExactly</h4><h4 id="metric" tabindex="-1"><a class="header-anchor" href="#metric" aria-hidden="true">#</a> metric</h4><h4 id="hasannotation" tabindex="-1"><a class="header-anchor" href="#hasannotation" aria-hidden="true">#</a> hasAnnotation</h4><h4 id="modifiers" tabindex="-1"><a class="header-anchor" href="#modifiers" aria-hidden="true">#</a> modifiers</h4><h4 id="explicitmodifiers" tabindex="-1"><a class="header-anchor" href="#explicitmodifiers" aria-hidden="true">#</a> explicitModifiers</h4><h4 id="matchessig" tabindex="-1"><a class="header-anchor" href="#matchessig" aria-hidden="true">#</a> matchesSig</h4>`,57);function b(v,y){const a=i("ExternalLinkIcon");return s(),l("div",null,[h,e("p",null,[t("Summary：介绍XPath规则的更多细节。 "),e("a",c,[t("XPath规则书写教程"),d(a)])]),p,m,e("p",null,[t("​ "),e("a",x,[t("XPath3.1新特性"),d(a)])]),u,e("p",null,[t("​ "),e("strong",null,[e("a",g,[t("规则Properties定义"),d(a)])])]),f])}const P=n(o,[["render",b],["__file","3XPath规则.html.vue"]]);export{P as default};
