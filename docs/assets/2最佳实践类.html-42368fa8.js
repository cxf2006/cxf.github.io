import{_ as p,r as c,o,c as l,a as n,d as a,e,b as t}from"./app-42f4feee.js";const i={},u=n("h1",{id:"最佳实践类规则",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#最佳实践类规则","aria-hidden":"true"},"#"),a(" 最佳实践类规则")],-1),r=n("p",null,"Summary:这些最佳实现规则通常都是强制执行的。",-1),d=n("h2",{id:"abstractclasswithoutabstractmethod",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#abstractclasswithoutabstractmethod","aria-hidden":"true"},"#"),a(" AbstractClassWithoutAbstractMethod")],-1),k=n("p",null,"​ 最低版本：PMD 3.0",-1),v=n("p",null,"​ 问题等级：中(3)",-1),m=n("p",null,"​ 规则定义：",-1),g={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/AbstractClassWithoutAbstractMethodRule.java",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>​ 规则描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	这个抽象类不包含任何抽象方法。抽象类意味着存在未完成的实现，应该由实现抽象方法的子类来完成。如果该类只打算用作基类（不应该直接实例化），可以提供一个受保护的构造函数以防止直接实例化。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 问题代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token keyword">int</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token keyword">int</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
  <span class="token comment">// consider using abstract methods or removing</span>
  <span class="token comment">// the abstract modifier and adding protected constructors</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="accessorclassgeneration" tabindex="-1"><a class="header-anchor" href="#accessorclassgeneration" aria-hidden="true">#</a> AccessorClassGeneration</h2><p>​ 最低版本：PMD 1.04</p><p>​ 问题等级：中(3)</p><p>​ 语言版本：&lt;=Java 10</p><p>​ 规则定义：</p>`,11),h={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/AccessorClassGenerationRule.java",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"​ 规则描述：",-1),y=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`	通过外部使用私有构造函数实例化常常会导致生成一个访问器。使用工厂方法或不将构造函数私有化可以消除这种情况。生成的类文件实际上是一个接口。它给访问该类的类提供了调用一个新的隐藏的包范围构造函数的能力，该构造函数接受接口作为附加参数。这实际上将私有构造函数变成了具有包范围的构造函数，很难分辨。
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f={href:"https://openjdk.org/jeps/181",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>​ 问题代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
 <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">Inner</span> ic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Causes generation of accessor class</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AccessorClassGeneration<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="accessormethodgeneration" tabindex="-1"><a class="header-anchor" href="#accessormethodgeneration" aria-hidden="true">#</a> AccessorMethodGeneration</h2><p>​ 最低版本：PMD 5.5.4</p><p>​ 问题等级：中(3)</p><p>​ 语言版本：&lt;=Java 10</p><p>​ 规则定义：</p>`,9),j={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/AccessorMethodGenerationRule.java",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"​ 规则描述：",-1),q=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`	当从另一个类访问私有字段/方法时，Java编译器将生成具有包私有可见性的访问器方法。这会增加开销，并增加Android上的dex方法计数。可以通过将字段/方法的可见性从私有更改为包私有来避免这种情况。
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),A={href:"https://openjdk.org/jeps/181",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>​ 问题代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> counter<span class="token punctuation">;</span>
    <span class="token comment">/* package */</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">OuterClass</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// wrong accessor method will be generated</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOuterClassId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">OuterClass</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span class="token comment">// id is package-private, no accessor method needed</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AccessorMethodGeneration<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="arrayisstoreddirectly" tabindex="-1"><a class="header-anchor" href="#arrayisstoreddirectly" aria-hidden="true">#</a> ArrayIsStoredDirectly</h2><p>​ 最低版本：PMD 2.2</p><p>​ 问题等级：中(3)</p><p>​ 规则定义：</p>`,8),R={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/ArrayIsStoredDirectlyRule.java",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>​ 规则参数：</p><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">allowPrivate</td><td style="text-align:left;">true</td><td style="text-align:left;">如果为真，则允许私有方法/构造函数直接存储数组。</td></tr></tbody></table><p>​ ⚠️实际测试PMD7.0版本时，allowPrivate对构造函数不生效。</p><p>​ 规则描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	接收数组的构造函数和方法应该克隆对象并存储副本。这样可以防止用户对原始数组产生未来更改的影响。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 问题代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> foo <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Don&#39;t do this, make a copy of the array at least</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>param<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引用(默认参数):</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/ArrayIsStoredDirectly<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 规则引用(自定义参数):</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/ArrayIsStoredDirectly<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>allowPrivate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="avoidmessagedigestfield" tabindex="-1"><a class="header-anchor" href="#avoidmessagedigestfield" aria-hidden="true">#</a> AvoidMessageDigestField</h2><p>​ 最低版本：PMD 6.18.0</p><p>​ 问题等级：中(3)</p><p>​ 规则定义(XPath规则)：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//FieldDeclaration/ClassOrInterfaceType[pmd-java:typeIs(&#39;java.security.MessageDigest&#39;)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 规则描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	将MessageDigest实例声明为字段将使该实例直接可供多个线程使用。如果访问未正确同步，这种共享MessageDigest实例应尽量避免，因为它会导致错误的结果。只需在需要时在本地创建一个新实例并使用它。创建新实例比同步对共享实例的访问更容易。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">MessageDigest</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AvoidMessageDigestFieldExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MessageDigest</span> sharedMd<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">AvoidMessageDigestFieldExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        sharedMd <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">calculateHashShared</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// sharing a MessageDigest like this without synchronizing access</span>
        <span class="token comment">// might lead to wrong results</span>
        sharedMd<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sharedMd<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sharedMd<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// better</span>
    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引用：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AvoidMessageDigestField<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="avoidprintstacktrace" tabindex="-1"><a class="header-anchor" href="#avoidprintstacktrace" aria-hidden="true">#</a> AvoidPrintStackTrace</h2><p>​ 最低版本：PMD 3.2</p><p>​ 问题等级：中(3)</p><p>​ 规则定义(XPath规则)：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//MethodCall[ pmd-java:matchesSig(&quot;java.lang.Throwable#printStackTrace()&quot;) ]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 规则描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>日志不要使用printStackTrace()输出。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 问题代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// do something</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引用</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AvoidPrintStackTrace<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="avoidreassigningcatchvariables" tabindex="-1"><a class="header-anchor" href="#avoidreassigningcatchvariables" aria-hidden="true">#</a> AvoidReassigningCatchVariables</h2><p>​ 最低版本：PMD 6.27.0</p><p>​ 问题等级：中(3)</p><p>​ 规则定义：</p>`,37),S={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/AvoidReassigningCatchVariablesRule.java",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>​ 规则描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>应避免重新分配在catch语句中捕获的异常变量，原因如下：
1如果需要重新分配，可以轻松添加多个捕获并且代码仍然可以编译。
2遵循最小异常原则，我们希望确保在catch语句中捕获的变量始终是在try块中抛出的变量。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 问题代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// do something</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// not recommended</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// do something</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException</span> <span class="token operator">|</span> <span class="token class-name">ServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// won&#39;t compile</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AvoidReassigningCatchVariables<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="avoidreassigningloopvariables" tabindex="-1"><a class="header-anchor" href="#avoidreassigningloopvariables" aria-hidden="true">#</a> AvoidReassigningLoopVariables</h2><p>​ 最低版本：PMD 6.11.0</p><p>​ 问题等级：中(3)</p><p>​ 规则定义：</p>`,10),C={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/AvoidReassigningLoopVariablesRule.java",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>​ 规则参数：</p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">默认值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">foreachReassign</td><td style="text-align:left;">deny</td><td style="text-align:left;">如何/是否可以重新分配foreach控制变量。</td></tr><tr><td style="text-align:left;">forReassign</td><td style="text-align:left;">deny</td><td style="text-align:left;">如何/是否可以重新分配for循环控制变量。</td></tr></tbody></table><p>​ 🍸在foreach循环中，根据foreachReassign属性的配置：</p><p>​ 🫓deny: 报告循环体中循环变量的任何重新分配。这是默认设置。</p><p>​ 🫓allow: 不检查循环变量。</p><p>​ 🫓firstOnly: 报告循环变量的任何重新分配，除非它是循环体中的第一个语句。如果允许在使用之前进行某种规范化或清理值的操作，但不允许对变量进行任何其他更改，则这很有用。</p><p>​ 🍸在for循环中，根据forReassign属性的配置：</p><p>​ 🫓deny: 报告循环体中控制变量的任何重新分配。这是默认设置。</p><p>​ 🫓allow: 不检查控制变量。</p><p>​ 🫓skip: 报告控制变量的任何重新分配，除非是有条件的增减操作（++, --, +=, -=）。这可以防止控制变量的意外重新分配或无条件的增减。</p><p>​ 规则描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>重新分配循环变量可能导致难以发现的错误。防止或限制这些变量的更改方式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 问题代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> <span class="token function">listOfStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK, when foreachReassign is &quot;firstOnly&quot; or &quot;allow&quot;</span>
      <span class="token function">doSomethingWith</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

      s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK, when foreachReassign is &quot;allow&quot;</span>
      <span class="token function">doSomethingElseWith</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// OK, when forReassign is &quot;skip&quot; or &quot;allow&quot;</span>
      <span class="token punctuation">}</span>

      i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// OK, when forReassign is &quot;allow&quot;</span>

      <span class="token function">doSomethingWith</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AvoidReassigningLoopVariables<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AvoidReassigningLoopVariables<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foreachReassign<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deny<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>forReassign<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deny<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="avoidreassigningparameters" tabindex="-1"><a class="header-anchor" href="#avoidreassigningparameters" aria-hidden="true">#</a> AvoidReassigningParameters</h2><p>​ 最低版本：PMD 1.0</p><p>​ 问题等级：中高(2)</p><p>​ 规则定义：</p>`,21),E={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/AvoidReassigningParametersRule.java",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>​ 规则描述：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	不建议重新分配方法或构造函数的传入参数的值，因为这可能使代码更难理解。通常，人们假设参数值不会改变，而赋值会违反“最小惊奇原则”。如果参数在方法的javadoc中有文档记录，而新内容与原始记录的内容不同，这尤其是一个问题。
	请改用临时本地变量。这允许您分配一个新名称，从而使代码更容易理解。
	请注意，此规则同时考虑了方法和构造函数。如果一个形式参数有多个赋值，那么只会报告第一个赋值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 问题代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// preferred</span>
    <span class="token class-name">String</span> trimmedName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> trimmedName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 规则引入：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>category/java/bestpractices.xml/AvoidReassigningParameters<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6);function V(J,F){const s=c("ExternalLinkIcon");return o(),l("div",null,[u,r,d,k,v,m,n("p",null,[n("a",g,[a("net.sourceforge.pmd.lang.java.rule.bestpractices.AbstractClassWithoutAbstractMethodRule"),e(s)])]),b,n("p",null,[n("a",h,[a("net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorClassGenerationRule"),e(s)])]),x,y,n("p",null,[a("​ ⚠️注意：此规则仅在Java 10或更低版本执行。自Java 11起，已经实现了 "),n("a",f,[a("JEP 181：基于嵌套的访问控制"),e(s)]),a("。这意味着在Java 11及更高版本中，不再生成访问器类。")]),w,n("p",null,[n("a",j,[a("net.sourceforge.pmd.lang.java.rule.bestpractices.AccessorMethodGenerationRule"),e(s)])]),_,q,n("p",null,[a("​ ⚠️注意：此规则仅在Java 10或更低版本执行。自Java 11起，已经实现了 "),n("a",A,[a("JEP 181：基于嵌套的访问控制"),e(s)]),a("。这意味着在Java 11及更高版本中，不再生成访问器类。")]),M,n("p",null,[n("a",R,[a("net.sourceforge.pmd.lang.java.rule.bestpractices.ArrayIsStoredDirectlyRule"),e(s)])]),D,n("p",null,[n("a",S,[a("net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningCatchVariablesRule"),e(s)])]),P,n("p",null,[n("a",C,[a("net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningLoopVariablesRule"),e(s)])]),I,n("p",null,[n("a",E,[a("net.sourceforge.pmd.lang.java.rule.bestpractices.AvoidReassigningParametersRule"),e(s)])]),O])}const T=p(i,[["render",V],["__file","2最佳实践类.html.vue"]]);export{T as default};
