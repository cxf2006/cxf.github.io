import{_ as s,r,o as l,c as i,a as e,d as n,e as a,b as o}from"./app-b63b8632.js";const d={},c=e("h1",{id:"如何在cpd上新增一种语言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#如何在cpd上新增一种语言","aria-hidden":"true"},"#"),n(" 如何在CPD上新增一种语言")],-1),p=e("p",null,"Summary：在CPD上增加新的语言模块",-1),u={id:"adding-support-for-a-cpd-language-✏️️",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#adding-support-for-a-cpd-language-✏️️","aria-hidden":"true"},"#",-1),h={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_new_cpd_language.md",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/Tokenizer.html#",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"Tokenizer",-1),v={href:"https://github.com/antlr/grammars-v4",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"Use the following guide to set up a new language module that supports CPD.",-1),b=e("li",null,[e("p",null,"Create a new Maven module for your language. You can take"),e("p",null,"the Golang module"),e("p",null,"as an example."),e("ul",null,[e("li",null,[n("Make sure to add your new module to the parent pom as "),e("code",null,"<module>"),n(" entry, so that it is built alongside the other languages.")]),e("li",null,"Also add your new module to the dependencies list in “pmd-languages-deps/pom.xml”, so that the new language is automatically available in the binary distribution (pmd-dist).")])],-1),f=e("p",null,"Implement a",-1),y=e("p",null,[e("code",null,"Tokenizer")],-1),T=e("p",null,".",-1),x={href:"https://github.com/antlr/grammars-v4",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"src/main/antlr4",-1),C=e("code",null,"pom.xml",-1),z={href:"https://github.com/pmd/pmd/tree/master/pmd-go/pom.xml",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"mvn generate-sources",-1),L={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/impl/AntlrTokenizer.html#",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"AntlrTokenizer",-1),q=o(`<p>public class GoTokenizer extends AntlrTokenizer {</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> @Override
 protected Lexer getLexerForSource(CharStream charStream) {
     return new GolangLexer(charStream);
 }  }  \`\`\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j=e("code",null,"etc/grammar",-1),A=e("code",null,"pom.xml",-1),B={href:"https://github.com/pmd/pmd/blob/master/pmd-python/pom.xml",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/impl/JavaCCTokenizer.html#",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"JavaCCTokenizer",-1),M=e("li",null,"For any other scenario just implement the interface however you can. Look at the Scala or Apex module for existing implementations.",-1),F={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/lang/Language.html#",target:"_blank",rel:"noopener noreferrer"},S=e("code",null,"Language",-1),J={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/CpdCapableLanguage.html#",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"CpdCapableLanguage",-1),E={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/lang/impl/CpdOnlyLanguageModuleBase.html#",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"CpdOnlyLanguageModuleBase",-1),R=o(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> // mind the package convention if you are going to make a PR
 package net.sourceforge.pmd.lang.go;

 public class GoLanguageModule extends CpdOnlyLanguageModuleBase {
        
     // A public noarg constructor is required.
     public GoLanguageModule() {
         super(LanguageMetadata.withId(&quot;go&quot;).name(&quot;Go&quot;).extensions(&quot;go&quot;));
     }

     @Override
     public Tokenizer createCpdTokenizer(LanguagePropertyBundle bundle) {
         // This method should return an instance of the tokenizer you created.
         return new GoTokenizer();
     }
 } 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To make PMD find the language module at runtime, write the fully-qualified name of your language class into the file <code>src/main/resources/META-INF/services/net.sourceforge.pmd.lang.Language</code>.</p>`,2),U={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/lang/LanguageRegistry.html#CPD",target:"_blank",rel:"noopener noreferrer"},Y=e("code",null,"CPD",-1),V=e("code",null,"SUPPORTED_LANGUAGES",-1),K={href:"https://github.com/pmd/pmd/blob/master/pmd-dist/src/test/java/net/sourceforge/pmd/it/BinaryDistributionIT.java",target:"_blank",rel:"noopener noreferrer"},H={href:"https://docs.pmd-code.org/latest/pmd_devdocs_major_adding_new_cpd_language.html#testing-your-implementation",target:"_blank",rel:"noopener noreferrer"},Q={id:"declaring-tokenizer-options-✏️️",tabindex:"-1"},W=e("a",{class:"header-anchor",href:"#declaring-tokenizer-options-✏️️","aria-hidden":"true"},"#",-1),X={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_new_cpd_language.md",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/PropertyFactory.html#",target:"_blank",rel:"noopener noreferrer"},$=e("code",null,"PropertyFactory",-1),ee={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/Tokenizer.html#",target:"_blank",rel:"noopener noreferrer"},ne=e("code",null,"Tokenizer",-1),te={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/Language.html#newPropertyBundle()",target:"_blank",rel:"noopener noreferrer"},ae=e("code",null,"newPropertyBundle",-1),oe=e("code",null,"definePropertyDescriptor",-1),se={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/CpdCapableLanguage.html#createCpdTokenizer(net.sourceforge.pmd.lang.LanguagePropertyBundle)",target:"_blank",rel:"noopener noreferrer"},re=e("code",null,"createCpdTokenizer",-1),le={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/impl/BaseTokenFilter.html#",target:"_blank",rel:"noopener noreferrer"},ie=e("code",null,"BaseTokenFilter",-1),de={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/cpd/impl/package-summary.html#",target:"_blank",rel:"noopener noreferrer"},ce=e("code",null,"net.sourceforge.pmd.cpd.impl",-1),pe={href:"https://github.com/pmd/pmd/blob/master/pmd-kotlin/src/main/java/net/sourceforge/pmd/lang/kotlin/cpd/KotlinTokenizer.java",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/cpd/JavaTokenizer.java",target:"_blank",rel:"noopener noreferrer"},me={id:"testing-your-implementation-✏️️",tabindex:"-1"},he=e("a",{class:"header-anchor",href:"#testing-your-implementation-✏️️","aria-hidden":"true"},"#",-1),ge={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_new_cpd_language.md",target:"_blank",rel:"noopener noreferrer"},_e=e("p",null,[n("Add a Maven dependency on "),e("code",null,"pmd-lang-test"),n(" (scope "),e("code",null,"test"),n(") in your "),e("code",null,"pom.xml"),n(". This contains utilities to test your tokenizer.")],-1),ve={href:"https://docs.pmd-code.org/apidocs/pmd-lang-test/7.0.0-rc4/net/sourceforge/pmd/cpd/test/CpdTextComparisonTest.html#",target:"_blank",rel:"noopener noreferrer"},ke=e("code",null,"CpdTextComparisonTest",-1),be=e("code",null,"@Test",-1),fe=e("code",null,"doTest",-1),ye=o(`<p>For example, for the Dart language:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">net<span class="token punctuation">.</span>sourceforge<span class="token punctuation">.</span>pmd<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>dart<span class="token punctuation">.</span>cpd</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DartTokenizerTest</span> <span class="token keyword">extends</span> <span class="token class-name">CpdTextComparisonTest</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**********************************
      Implementation of the superclass
    ***********************************/</span>


    <span class="token keyword">public</span> <span class="token class-name">DartTokenizerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;dart&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.dart&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the ID of the language, then the file extension used by test files</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getResourcePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// &quot;testdata&quot; is the default value, you don&#39;t need to override.</span>
        <span class="token comment">// This specifies that you should place the test files in</span>
        <span class="token comment">// src/test/resources/net/sourceforge/pmd/lang/dart/cpd/testdata</span>
        <span class="token keyword">return</span> <span class="token string">&quot;testdata&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**************
      Test methods
    ***************/</span>


    <span class="token annotation punctuation">@Test</span>  <span class="token comment">// don&#39;t forget the JUnit annotation</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLiterals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// This will look for a file named literals.dart</span>
        <span class="token comment">// in the directory identified by getResourcePrefix,</span>
        <span class="token comment">// tokenize it, then compare the result against a baseline</span>
        <span class="token comment">// literals.txt file in the same directory</span>

        <span class="token comment">// If the baseline file does not exist, it is created automatically</span>
        <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token string">&quot;literals&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function Te(xe,we){const t=r("ExternalLinkIcon");return l(),i("div",null,[c,p,e("h2",u,[m,n(" Adding support for a CPD language "),e("a",h,[n("✏️️"),a(t)])]),e("p",null,[n("CPD works generically on the tokens produced by a "),e("a",g,[_,a(t)]),n(". To add support for a new language, the crucial piece is writing a tokenizer that splits the source file into the tokens specific to your language. Thankfully you can use a stock "),e("a",v,[n("Antlr grammar"),a(t)]),n(" or JavaCC grammar to generate a lexer for you. If you cannot use a lexer generator, for instance because you are wrapping a lexer from another library, it is still relatively easy to implement the Tokenizer interface.")]),k,e("ol",null,[b,e("li",null,[f,y,T,e("ul",null,[e("li",null,[e("p",null,[n("For Antlr grammars you can take the grammar from "),e("a",x,[n("antlr/grammars-v4"),a(t)]),n(" and place it in "),w,n(" followed by the package name of the language. You then need to call the appropriate ant wrapper to generate the lexer from the grammar. To do so, edit "),C,n(" (eg like "),e("a",z,[n("the Golang module"),a(t)]),n("). Once that is done, "),P,n(" should generate the lexer sources for you.")]),e("p",null,[n("You can now implement a tokenizer, for instance by extending "),e("a",L,[D,a(t)]),n(". The following reproduces the Go implementation: ```java // mind the package convention if you are going to make a PR package net.sourceforge.pmd.lang.go.cpd;")])])]),q,e("ul",null,[e("li",null,[n("For JavaCC grammars, place your grammar in "),j,n(" and edit the "),A,n(" like the "),e("a",B,[n("Python implementation"),a(t)]),n(" does. You can then subclass "),e("a",I,[G,a(t)]),n(" instead of AntlrTokenizer.")]),M])]),e("li",null,[e("p",null,[n("Create a "),e("a",F,[S,a(t)]),n(" implementation, and make it implement "),e("a",J,[O,a(t)]),n(". If your language only supports CPD, then you can subclass "),e("a",E,[N,a(t)]),n(" to get going:")]),R,e("p",null,[n("At this point the new language module should be available in "),e("a",U,[Y,a(t)]),n(" and usable by CPD like any other language.")])]),e("li",null,[e("p",null,[n("Update the test that asserts the list of supported languages by updating the "),V,n(" constant in "),e("a",K,[n("BinaryDistributionIT"),a(t)]),n(".")])]),e("li",null,[e("p",null,[n("Add some tests for your tokenizer by following the "),e("a",H,[n("section below"),a(t)]),n(".")])])]),e("h3",Q,[W,n(" Declaring tokenizer options "),e("a",X,[n("✏️️"),a(t)])]),e("p",null,[n("To make the tokenizer configurable, first define some property descriptors using "),e("a",Z,[$,a(t)]),n(". Look at "),e("a",ee,[ne,a(t)]),n(" for some predefined ones which you can reuse (prefer reusing property descriptors if you can). You need to override "),e("a",te,[ae,a(t)]),n(" and call "),oe,n(" to register the descriptors. After that you can access the values of the properties from the parameter of "),e("a",se,[re,a(t)]),n(".")]),e("p",null,[n("To implement simple token filtering, you can use "),e("a",le,[ie,a(t)]),n(" as a base class, or another base class in "),e("a",de,[ce,a(t)]),n(". Take a look at the "),e("a",pe,[n("Kotlin token filter implementation"),a(t)]),n(", or the "),e("a",ue,[n("Java one"),a(t)]),n(".")]),e("h3",me,[he,n(" Testing your implementation "),e("a",ge,[n("✏️️"),a(t)])]),_e,e("p",null,[n("Create a test class extending from "),e("a",ve,[ke,a(t)]),n(". To add tests, you need to write regular JUnit "),be,n("-annotated methods, and call the method "),fe,n(" with the name of the test file.")]),ye])}const ze=s(d,[["render",Te],["__file","4添加新语言(CPD).html.vue"]]);export{ze as default};
