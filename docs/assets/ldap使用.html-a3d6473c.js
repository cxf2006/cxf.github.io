import{_ as e,o as a,c as d,b as t}from"./app-1acd32cf.js";const r={},s=t('<p>参考连接：https://zhuanlan.zhihu.com/p/532447126?utm_id=0</p><p>​ [十二、关于openLDAP的常用操作]</p><h1 id="ldap相关概念" tabindex="-1"><a class="header-anchor" href="#ldap相关概念" aria-hidden="true">#</a> LDAP相关概念</h1><p>​ dn（Distinguished Name）</p><p>：区分名称，dn是条目在整棵树中的唯一标识。</p><p>​ rdn（Relative dn）：相对区分名称。</p><p>​ dc（Domain Component）：域名组件。例如：example.com变成dc=example,dc=com。</p><p>​ c（Country）：国家，如“CN”或者“US”。</p><p>​ o（Organization）：组织名，如XXX银行，XXX部门，XXX公司等等。</p><p>​ ou（Organization Unit）：组织单元。</p><p>​ cn（Common Name）：公共名称。</p><p>​ sn（surname）：姓氏。</p><p>​ uid（User ID）：用户ID</p><h1 id="特有属性通过编写schema文件实现" tabindex="-1"><a class="header-anchor" href="#特有属性通过编写schema文件实现" aria-hidden="true">#</a> 特有属性通过编写schema文件实现</h1><h1 id="通过ldif文件数据备份-新增数据" tabindex="-1"><a class="header-anchor" href="#通过ldif文件数据备份-新增数据" aria-hidden="true">#</a> 通过ldif文件数据备份，新增数据</h1><h1 id="安全连接ssl配置" tabindex="-1"><a class="header-anchor" href="#安全连接ssl配置" aria-hidden="true">#</a> 安全连接ssl配置</h1><h1 id="acl控制访问权限" tabindex="-1"><a class="header-anchor" href="#acl控制访问权限" aria-hidden="true">#</a> ACL控制访问权限</h1><h2 id="设置方法" tabindex="-1"><a class="header-anchor" href="#设置方法" aria-hidden="true">#</a> 设置方法</h2><p>1、可以将 include行放在/etc/openldap/slapd.conf 的顶部，指向一个单独的文件（例如， include /etc/openldap/slapd.access.conf） 2、或者可以将 ACL 直接添加到 slapd.conf。这完全由您选择 ― Mandrake 通常使用 include 行；Red Hat 将 ACL 添加到配置文件。slapd.conf文件路径：/etc/openldap/slapd.conf</p><h2 id="acl设置语法" tabindex="-1"><a class="header-anchor" href="#acl设置语法" aria-hidden="true">#</a> ACL设置语法</h2><h3 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1.语法</h3><p>access to what： by who access control 其中,access to指示启用访问控制，上句大致可以理解为: access to &lt;对什么目标进行控制&gt;[by &lt;作用于哪些访问者&gt; &lt;授予什么样的访问权限&gt;&lt;采取什么样的匹配控制动作&gt;]+</p><h3 id="_2-剖析" tabindex="-1"><a class="header-anchor" href="#_2-剖析" aria-hidden="true">#</a> 2.剖析</h3><h4 id="_2-1-控制目标-what" tabindex="-1"><a class="header-anchor" href="#_2-1-控制目标-what" aria-hidden="true">#</a> 2.1 控制目标 what</h4><p>这一域主要是实现对ACL应用对象的指定，对象可以是记录和属性。选择ACL目标记录的方法一般有两种：DN和filter,语法为：</p><p>what ::= * | [dn[.basic-style]=regex | dn.scope-style=DN] [filter=ldapfilter] [attrs=&lt;attrlist&gt;]</p><h5 id="_2-1-1-指定所有的记录" tabindex="-1"><a class="header-anchor" href="#_2-1-1-指定所有的记录" aria-hidden="true">#</a> 2.1.1 指定所有的记录</h5><p>access to *</p><h5 id="_2-1-2-通过dn指定" tabindex="-1"><a class="header-anchor" href="#_2-1-2-通过dn指定" aria-hidden="true">#</a> 2.1.2 通过DN指定</h5><p>语法如下：</p><p>to dn[.basic-style]=regex basic-style ::= regex | exact to dn.scope-style=DN scope-style ::= base | one | subtree | children</p><p>第一种方法是使用正则表达式(dn.regex)或精确匹配(dn.style)的方式来匹配符合条件的记录（这个好像不像想象的那么简单，实现起来颇为费脑筋），例如：</p><p>access to dn=&quot;^.<em>,uid=([^,]+),ou=users,(.</em>)$&quot;</p><p>第二种方法通过“区域”选择的方法进行目标记录的选取，对以指定的DN开始的目录树区域进行目标记录匹配。匹配区域的方式共有四种： base 只匹配DN本身一条记录 one 匹配以给定DN为父目录的所有记录 subtree 匹配以给定DN为根目录的所有子树内的记录 children 匹配给定DN下的所有记录，但应该不包括以DN直接命名的那条记录(参见例子的解释)</p><p>例如：对于 0: dc=mydomain,dc=org 1: cn=root,dc=mydomain,dc=org 2: ou=users,dc=mydomain,dc=org 3: uid=samba,ou=users,dc=mydomain,dc=org 4: cn=Administator,uid=samba,ou=users,dc=mydomain,dc=org 5: uid=guest,ou=users,dc=mydomain,dc=org</p><p>规则 dn.base=”ou=users,dc=mydomain,dc=org” 只会匹配记录2 规则 dn.one=”ou=users,dc=mydomain,dc=org” 匹配记录3和记录5，记录4是记录3的子目录，故不算在内 规则 dn.subtree=”ou=users,dc=mydomain,dc=org” 匹配记录2、3、4、5 规则 dn.children=”ou=users,dc=mydomain,dc=org” 匹配记录3、4、5,因为记录0、1和2都是以DN直接命名的，故不匹配</p><h5 id="_2-1-3-通过filter匹配记录" tabindex="-1"><a class="header-anchor" href="#_2-1-3-通过filter匹配记录" aria-hidden="true">#</a> 2.1.3 通过filter匹配记录</h5><p>通过filter指定过滤规则进行记录过虑，语法如下：</p><p>access to filter=ldap filter</p><p>其中filter指定的为search的过滤规则，这类同于linux系统中grep的匹配方式。如：</p><p>access to filter=(objectClass=sambaSamAccount)</p><p>也可以结合使用DN和filter进行记录的匹配，例如：</p><p>access to dn.subtree=”ou=users,dc=mydomain,dc=org” filter=(objectClass=posixAccount)</p><h5 id="_2-1-4-通过attrs选取匹配记录" tabindex="-1"><a class="header-anchor" href="#_2-1-4-通过attrs选取匹配记录" aria-hidden="true">#</a> 2.1.4 通过attrs选取匹配记录</h5><p>语法: attrs=attribute list</p><p>例如： access to attrs=uid,uidNumber,gidNumber</p><p>也可以结合使用DN和attrs进行记录的匹配，例如： access to dn.subtree=&quot;ou=users,dc=mydomain,dc=org&quot; attrs=uid</p><h4 id="_2-2-被用来授权的访问者的指定" tabindex="-1"><a class="header-anchor" href="#_2-2-被用来授权的访问者的指定" aria-hidden="true">#</a> 2.2 被用来授权的访问者的指定</h4><p>指定被授权的用户范围的方法大致有以下几种：</p><ul><li>所有的访问者，包括匿名的用户 anonymous 非认证的匿名用户 users 认证的用户 self 目标记录的用户自身 dn[.&lt;basic-style&gt;]=&lt;regex&gt; 在指定目录内匹配正则表达式的用户 dn.&lt;scope-style&gt;=&lt;DN&gt; 指定DN内的用户</li></ul><p>例如： by dn.subtree=&quot;ou=users,dc=domain,dc=org&quot;=&quot;^samba*&quot;</p><h4 id="_2-3-被授予的权限access" tabindex="-1"><a class="header-anchor" href="#_2-3-被授予的权限access" aria-hidden="true">#</a> 2.3 被授予的权限access</h4><p>当选取好ACL作用的目标记录并选取好用户范围后，就该给这些用户授予他们应该得到的权限了。大致的权限(由低到高)有以下几类： none 无权限，即拒绝访问 auth 访问bind（认证）设置的权限；前提是需要用户提交一个DN形式的用户名并能通过认证 compare 比较属性的权限；（例如：对照查看某用户的telephoneNumber值是不是158 8888 8888）,但并不具有搜索的权限 search 利用过虑条件进行搜索的权限,但这并不一定具有可读取搜索结果的权限 read 读取搜索结果的权限 write 更改记录属性值的权限</p><p>可以在slapd.conf文件中通过defaultaccess指定默认的权限级别,如： defaultaccess search</p><h4 id="_2-4-采取什么样的匹配控制动作control" tabindex="-1"><a class="header-anchor" href="#_2-4-采取什么样的匹配控制动作control" aria-hidden="true">#</a> 2.4 采取什么样的匹配控制动作control</h4><p>在进行记录的匹配时，如果有多条规则存在，那么在第一次匹配产生后是否还进行后续的匹配或采取其它的动作将取决于此项的设置；控制方式共有以下三种：</p><p>stop 这个是默认值，这表示在一次匹配产生后将不再进行下一个匹配，所有后续的匹配将会停止。 continue 无论匹配是否已经发生，继续进行直到所有的规则全部进行完匹配检查 break 一个匹配发生后，跳出当前的子句进行后一个子句的检查</p><h4 id="_2-5-一个例子" tabindex="-1"><a class="header-anchor" href="#_2-5-一个例子" aria-hidden="true">#</a> 2.5 一个例子</h4><p>access to dn.chilren=&quot;ou=users,dc=mydomain,dc=org&quot; attrs=userPassword #指定“密码”属性 by self write #用户自己可更改 by * auth #所有访问者需要通过认证 by dn.children=&quot;ou=admins,dc=mydomain,dc=org&quot; write #管理员组的用户可更改</p><p>access to dn.subtree=&quot;ou=SUDOers,dc=test,dc=com&quot; #SUDOers的所有内容必须提供其他匿名可读，不然在linux上切换到该用户，不能使用sudo by dn=&quot;cn=Manager,dc=test,dc=com&quot; write by * read access to attrs=&quot;gidNumber,homeDirectory,loginShell,uidNumber,sshPublicKey&quot; by * read #对这些属性只能读，但是userPassword字段是可写的，允许用户自行修改密码，但是不能修改自己的gid，home目录等 access to * by anonymous read #匿名访问可读 by self write #自己可写 by users read #其他用户可读</p><p>前面这些配置需要放在 database config access to * by dn.exact=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot; manage by * none enable server status monitoring (cn=monitor) database monitor access to * by dn.exact=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot; read by dn.exact=&quot;cn=Manager,dc=test,dc=com&quot; read by * none 的前面才能生效 原文链接：https://blog.csdn.net/dolphin_h/article/details/54960255</p><h1 id="filter语法" tabindex="-1"><a class="header-anchor" href="#filter语法" aria-hidden="true">#</a> filter语法</h1><p>https://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx?Sort=MostUseful</p><h1 id="各种类型服务集成ldap认证" tabindex="-1"><a class="header-anchor" href="#各种类型服务集成ldap认证" aria-hidden="true">#</a> 各种类型服务集成ldap认证</h1><p>https://cloud.tencent.com/developer/article/2008047</p><h2 id="java端连接ldap" tabindex="-1"><a class="header-anchor" href="#java端连接ldap" aria-hidden="true">#</a> java端连接ldap</h2><p>​</p>',67),c=[s];function n(o,i){return a(),d("div",null,c)}const l=e(r,[["render",n],["__file","ldap使用.html.vue"]]);export{l as default};
