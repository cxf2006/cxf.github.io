import{_ as a,o as e,c as n,e as t}from"./app-d417e0ec.js";const s={},p=t(`<h1 id="规则弃用策略" tabindex="-1"><a class="header-anchor" href="#规则弃用策略" aria-hidden="true">#</a> 规则弃用策略</h1><p>Summary：描述什么时候什么情况下规则会被弃用。</p><p>​ 随着时间的推移，当改进PMD时，一些规则可能会变得过时。这可能是因为某个规则检查的底层技术（如特定的JVM版本）不再相关，或者某个规则已被更好的实现替代。</p><p>​ 为了摆脱永久维护这些规则的要求，可以将这些规则标记为弃用。这意味着这些规则可以在将来完全删除。但是，不能立即删除这些规则，因为这将破坏引用这些规则的任何（自定义）规则集。</p><p>​ 这一政策试图建立一些关于如何以及何时弃用和删除规则的基本规则。主要目标是在弃用过程中维护自定义规则集的兼容性。</p><h2 id="重命名" tabindex="-1"><a class="header-anchor" href="#重命名" aria-hidden="true">#</a> 重命名</h2><p>​ 如果增强了某个规则，也许将规则重命名以反映增强内容是有道理的。然而，简单地重命名规则会破坏现有的（自定义）规则集。因此，应使用以下过程：</p><ol><li>将规则重命名为新名称（同时还要重命名规则测试和资源）。</li><li>添加一个引用旧名称的已弃用规则引用，指向新的规则名称：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OldRuleName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>NewRuleName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">deprecated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ ⚠️注意：在引用完整的规则集或类别时，这些已弃用的规则引用会被忽略，以避免规则被重复使用。</p><h2 id="将规则从一个类别移动到另一个类别" tabindex="-1"><a class="header-anchor" href="#将规则从一个类别移动到另一个类别" aria-hidden="true">#</a> 将规则从一个类别移动到另一个类别</h2><p>​ 每个规则都属于一个类别。有时候，规则的重点可能会发生变化，如果将其移到一个不同且更合适的类别中会更有意义。</p><p>​ 🍸将规则移动到新的类别中（同时也要移动规则测试和资源）</p><p>​ 🍸 在旧类别中添加一个已弃用的规则引用，指向新类别中的规则：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;rule name=&quot;MyRule&quot; ref=&quot;category/java/errorprone.xml/MyRule&quot; deprecated=&quot;true&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ ⚠️注意：在引用完整的规则集或类别时，这些已弃用的规则引用会被忽略，以避免规则被重复使用，如果同时使用了两个类别。</p><h2 id="废弃规则" tabindex="-1"><a class="header-anchor" href="#废弃规则" aria-hidden="true">#</a> 废弃规则</h2><p>​ 在规则被移除之前，必须先将其标记为已弃用:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;rule name=&quot;MyRule&quot; class=&quot;....&quot; deprecated=&quot;true&quot;&gt;
...
&lt;/rule&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这将使其在引用整个规则集或类别时自动禁用。但如果直接引用该规则，仍然可以使用。</p><p>​ 弃用规则的原因应该在规则描述中进行解释。如果有可替代的规则可用，那么在描述中也应提及该规则。</p><h2 id="删除规则" tabindex="-1"><a class="header-anchor" href="#删除规则" aria-hidden="true">#</a> 删除规则</h2><p>​ 彻底删除规则只能在以下情况下进行：</p><p>​ 🍸如果规则在之前已经被弃用</p><p>​ 🍸用于新的主要版本发布。</p><p>​ 从规则集或类别中删除规则将破坏任何直接引用该规则的自定义规则集。因此，规则只能在 PMD 的下一个主要版本发布时进行删除。</p><h2 id="规则属性兼容性" tabindex="-1"><a class="header-anchor" href="#规则属性兼容性" aria-hidden="true">#</a> 规则属性兼容性</h2>`,27),l=[p];function r(u,i){return e(),n("div",null,l)}const d=a(s,[["render",r],["__file","8规则弃用策略.html.vue"]]);export{d as default};
