import{_ as p,r as o,o as c,c as l,a as n,d as a,e as t,b as e}from"./app-26820943.js";const u={},r=e('<h1 id="定义规则参数" tabindex="-1"><a class="header-anchor" href="#定义规则参数" aria-hidden="true">#</a> 定义规则参数</h1><p>Summary：学习如何给Java规则、XPath规则定义参数。</p><p>​ 规则属性是一种使您的规则可以直接从规则集XML配置的方法。它们的使用方法在“配置规则”页面上有描述。</p><p>​ 如果您是规则开发人员，您可能想考虑用户在使用您的规则时可能希望进行参数化的内容。这可以是一个数值报告级别，一个更改规则行为的布尔标志...很可能有一些细节可以从您的实现中抽象出来，在这种情况下，此页面可以帮助您提供更多的灵活性。</p><h2 id="参数概览" tabindex="-1"><a class="header-anchor" href="#参数概览" aria-hidden="true">#</a> 参数概览</h2><p>​ 作为开发者，您需要做的基本事情是定义一个属性描述符，并说在规则中如何使用。属性描述符为您的属性定义了一些属性：</p><ul><li>名称，用户将用它来引用您的属性；</li><li>描述，用于文档目的；</li><li>默认值</li></ul><p>​ 所有这些属性可以在单个Java语句（或XPath规则的XML元素）中指定。</p><h2 id="java规则相关参数" tabindex="-1"><a class="header-anchor" href="#java规则相关参数" aria-hidden="true">#</a> Java规则相关参数</h2><p>​ 定义属性的步骤非常简单：</p>',10),i={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/PropertyFactory.html#",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"PropertyFactor",-1),k={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/PropertySource.html#definePropertyDescriptor(net.sourceforge.pmd.properties.PropertyDescriptor)",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"definePropertyDescriptor(PropertyDescriptor)",-1),v={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/PropertySource.html#getProperty(net.sourceforge.pmd.properties.PropertyDescriptor)",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"getProperty(PropertyDescriptor)",-1),h=n("h3",{id:"创建描述符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#创建描述符","aria-hidden":"true"},"#"),a(" 创建描述符")],-1),q={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/PropertyFactory.html#",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"PropertyFactory",-1),y=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PropertyFactory</span><span class="token punctuation">.</span><span class="token function">stringProperty</span><span class="token punctuation">(</span><span class="token string">&quot;myProperty&quot;</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;This is my property&quot;</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这种方法比直接调用构造函数更具可读性，但请记住，描述和默认值不是可选的。</p><p>对于数值属性，您可以添加有关可接受值范围的约束，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PropertyFactory</span><span class="token punctuation">.</span><span class="token function">intProperty</span><span class="token punctuation">(</span><span class="token string">&quot;myIntProperty&quot;</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;This is my property&quot;</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token function">positive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// must be &gt; 0</span>
               <span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token function">below</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// must be &lt;= 100</span>
               <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),f={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/NumericConstraints.html#",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"NumericConstraints",-1),x={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/PropertyConstraint.html#",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"PropertyConstraint",-1),D=e(`<p>​ 枚举属性没有特定的值类型，相反，您可以选择任何类型的值，只要这些值来自一个封闭的集合。为了使其可行，您为每个可接受的值提供字符串标签，用户将在XML中提供其中一个标签作为值。属性将返回与标签关联的值，而不是标签本身。以下是一个示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">enum</span> <span class="token class-name">Mode</span> <span class="token punctuation">{</span>
    <span class="token class-name">Easy</span><span class="token punctuation">,</span> <span class="token class-name">Hard</span>
<span class="token punctuation">}</span>

<span class="token comment">// Using this method, the labels are the \`toString\` of each enum constant.</span>
<span class="token comment">// To customize this look at the overloads of \`enumProperty\`.</span>
<span class="token keyword">static</span> <span class="token class-name">PropertyDescriptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Mode</span><span class="token punctuation">&gt;</span></span> modeProperty
 <span class="token operator">=</span> <span class="token class-name">PropertyFactory</span><span class="token punctuation">.</span><span class="token function">enumProperty</span><span class="token punctuation">(</span><span class="token string">&quot;modeProperty&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Mode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;This is my property&quot;</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>Easy</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3>`,3),I={href:"https://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/AvoidReassigningLoopVariablesRule.java#L40",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,"属性描述符被声明为static final，通常应该这样，因为描述符是不可变的，可以在相同规则的不同实例之间共享；",-1),M={href:"https://docs.pmd-code.org/apidocs/pmd-core/7.0.0-rc4/net/sourceforge/pmd/properties/PropertySource.html#definePropertyDescriptor(net.sourceforge.pmd.properties.PropertyDescriptor)",target:"_blank",rel:"noopener noreferrer"},X=n("code",null,"definePropertyDescriptor",-1),S=n("li",null,"属性的值不是在构造函数中检索的，而是在其中一个访问方法中检索（通常在树中的最高节点上，因为属性不会更改）。",-1),L=e(`<h2 id="xpath规则参数" tabindex="-1"><a class="header-anchor" href="#xpath规则参数" aria-hidden="true">#</a> XPath规则参数</h2><p>​ XPath规则也可以定义自己的属性。要这样做，您必须在规则的属性元素中添加一个属性元素，该元素声明了type属性。该属性条件了底层属性的类型，并可以具有以下值：</p><table><thead><tr><th style="text-align:left;"><code>type</code> attribute</th><th style="text-align:left;">XSD type</th></tr></thead><tbody><tr><td style="text-align:left;">Integer</td><td style="text-align:left;">xs:integer</td></tr><tr><td style="text-align:left;">Long</td><td style="text-align:left;">xs:integer</td></tr><tr><td style="text-align:left;">Double</td><td style="text-align:left;">xs:decimal</td></tr><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">xs:boolean</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:left;">xs:string</td></tr><tr><td style="text-align:left;">Character</td><td style="text-align:left;">xs:string</td></tr><tr><td style="text-align:left;">Regex</td><td style="text-align:left;">xs:string</td></tr></tbody></table><p>​ 请注意，枚举属性在XPath规则中不可用（后面也许会支持？）。</p><p>​ 在XPath中定义的属性还必须声明description属性。目前，数值属性也需要min和max属性。以下是一些示例来总结一下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stringProp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Boolean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A BooleanProperty.<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>intProp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Integer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>An IntegerProperty.<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 然后，您可以在XPath中使用以下语法$propertyName，例如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>MyXpathRule<span class="token punctuation">&quot;</span></span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxStatements<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Integer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>40<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Max number of statements per method<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xpath<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token cdata">&lt;![CDATA[
      //MethodDeclaration/Block[count(//BlockStatement) &gt; $maxStatements]
    ]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多值属性" tabindex="-1"><a class="header-anchor" href="#多值属性" aria-hidden="true">#</a> 多值属性</h3><p>​ 还允许使用多值属性，其type属性的形式为List[Boolean]或List[Character]，允许上述每种类型。这些属性利用了XPath 2.0及以上版本提供的序列数据类型。当提供多个值时，分隔符是一个简单的逗号（“,”）。逗号在需要时可以用反斜杠进行转义。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>MyXpathRule<span class="token punctuation">&quot;</span></span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>version<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>intProp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>List[Integer]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1,2,5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>An IntegerMultiProperty.<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reportedIdentifiers<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>List[String]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo,bar<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A StringMultiProperty.<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xpath<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token cdata">&lt;![CDATA[
      //VariableDeclaratorId[@Image = $reportedIdentifiers]
    ]]&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 请注意，在上面的示例中，@Image = $reportedIdentifiers不会测试@Image是否等于整个序列(&#39;foo&#39;, &#39;bar&#39;)，而是测试序列是否包含@Image。也就是说，上面的规则将报告所有名为foo或bar的变量。还支持所有其他在序列上操作的XPath 2.0函数。</p>`,12),A={href:"https://docs.pmd-code.org/latest/pmd_userdocs_extending_designer_reference.html#rule-properties",target:"_blank",rel:"noopener noreferrer"};function B(C,V){const s=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[a("​ 📍使用"),n("a",i,[d,t(s)]),a("中的构建器创建所需类型的属性描述符。")]),n("p",null,[a("​ 📍在规则的无参数构造函数中调用"),n("a",k,[m,t(s)]),a("。")]),n("p",null,[a("​ 然后，您可以随时使用"),n("a",v,[g,t(s)]),a("检索属性的值。")]),h,n("p",null,[a("​ 可以使用特定于类型的构建器来创建属性，这些构建器可以从 "),n("a",q,[b,t(s)]),a("的工厂方法中获取。例如，要构建一个字符串属性，您可以调用以下方法：")]),y,n("p",null,[a('​ 预定义的约束，如"positive"和"below"，可以在'),n("a",f,[_,t(s)]),a("类中找到。还可以通过实现"),n("a",x,[P,t(s)]),a("接口来实现自定义约束。")]),D,n("p",null,[a('​ 您可以在PMD规则中使用属性的示例，例如"'),n("a",I,[a("避免重新分配循环变量"),t(s)]),a('"。有几件事情需要注意：')]),n("ul",null,[j,n("li",null,[a("属性在构造函数中使用"),n("a",M,[X,t(s)]),a("进行声明，这可以确保在属性被覆盖时（在执行规则之前发生）PMD会识别到该属性；")]),S]),L,n("p",null,[a("🎗️ "),n("a",A,[a("还可以直接在设计器上定义属性"),t(s)])])])}const N=p(u,[["render",B],["__file","6定义规则参数.html.vue"]]);export{N as default};
