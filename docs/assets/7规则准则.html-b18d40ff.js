import{_ as a,o as e,c as r,b as t}from"./app-b63b8632.js";const h={},n=t('<h1 id="规则准则" tabindex="-1"><a class="header-anchor" href="#规则准则" aria-hidden="true">#</a> 规则准则</h1><p>Summary：规则指南，或规则的最后修饰</p><p>​ 以下是一些您可能会在规则“正常运行”后考虑的事项。</p><h2 id="如何定义规则优先级" tabindex="-1"><a class="header-anchor" href="#如何定义规则优先级" aria-hidden="true">#</a> 如何定义规则优先级</h2><p>​ 规则的优先级在项目的上下文中可能会有很大变化。然而，您可以使用以下准则来确定您的规则的合理优先级：</p><p>​ 1.高：绝对需要更改。行为严重错误/有缺陷。</p><p>​ 2.中高：强烈建议更改。行为很可能错误/有缺陷。</p><p>​ 3.中：建议更改。行为令人困惑，可能有缺陷，并/或违反了标准/最佳实践。</p><p>​ 4.中低：可选更改。行为不太可能有缺陷，但可能违反了标准/风格/良好品味。</p><p>​ 5.低：高度可选更改。可以的话，例如包/类/字段的一致命名策略...</p><p>​ 例如，让我们看一下“不要显式触发垃圾回收”的规则（&quot;Do not explicitly trigger a garbage collection.&quot;）。调用GC是一个坏主意，但它不会导致应用程序崩溃。所以我们跳过优先级一。但是，显式调用gc可能会严重影响应用程序性能，因此我们将其设置为优先级2（“中高”）。</p><h2 id="正确性" tabindex="-1"><a class="header-anchor" href="#正确性" aria-hidden="true">#</a> 正确性</h2><p>​ 您应该尝试在大型代码库上运行规则，比如 JDK 源代码，以确保规则在处理不寻常的代码结构时不会引发异常。</p><p>​ 如果您的规则是有状态的，请确保它在处理每个文件时都能正确地重新初始化。</p><h2 id="性能问题" tabindex="-1"><a class="header-anchor" href="#性能问题" aria-hidden="true">#</a> 性能问题</h2><p>​ 在编写新规则时，对一些规则使用命令行选项 --benchmark 可以提供有关规则与其他规则相比的性能指标。为了获取全面的情况，使用 rulesets/internal/all-java.xml 规则集并加上“--benchmark”。</p><p>​ 使用 RuleChain 访问 AST 的规则比手动遍历 AST 的规则更快。对于单个 Java 规则，差异很小，但在运行数百个规则时，性能差异是可测量的。对于 XPath 规则，由于 AST 导航的开销，性能差异非常明显。确保您的 XPath 规则使用 RuleChain。如果 RuleChain 无法用于您的 XPath 规则，那么此事将记录为调试消息。</p><p>（TODO 除非在调试器中运行或性能非常糟糕，否则如何知道？）</p>',18),p=[n];function i(c,d){return e(),r("div",null,p)}const l=a(h,[["render",i],["__file","7规则准则.html.vue"]]);export{l as default};
