import{_ as o,r as s,o as l,c as i,a as e,d as t,e as n,b as r}from"./app-26820943.js";const d={},c=r(`<h1 id="为基于antlr语法的新语言添加pmd支持" tabindex="-1"><a class="header-anchor" href="#为基于antlr语法的新语言添加pmd支持" aria-hidden="true">#</a> 为基于ANTLR语法的新语言添加PMD支持</h1><p>Summary:怎样基于ANRLE语法添加一种新的语言。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Before you start…
这确实是一个重大的贡献，不能仅仅靠临时性的贡献完成。要实现对新语言的支持，需要专注的热情和长期的承诺。

这个逐步指南只是一个入门，用来开始了解基础，而且也不一定是最新或完整的。你必须有能力填补空白部分。

当前，与JavaCC相比，Antlr集成具有一些基本的限制：Antlr解析器生成的输出不是抽象语法树（AST），而是解析树（也称为CST，具体语法树）。因此，解析树比典型的JavaCC语法生成的要更细粒化。这意味着解析树更深，包含不同令牌类型的节点。

Antlr节点是上下文对象，提供了与AST中节点不同的抽象。这些上下文对象本身没有任何属性，因为它们本身代表属性（作为解析树中的节点或叶子）。由于它们没有属性，因此在基于XPath的规则中无法使用属性。

目前使用Antlr的语言的实现使用这些上下文对象作为PMD的AST表示中的节点。

为了克服这些限制，需要实施一个后处理步骤，将解析树转换为抽象语法树，并引入更高抽象级别的真正节点。然后，这些真正的节点可以具有可用于基于XPath的规则的属性。这个转换可以通过访问者来实现，但AST的实现是一个手动步骤。这个步骤在本指南中没有详细描述。

在为一种语言提供基本支持后，仍然有许多缺失的功能。可以极大改进规则编写的典型功能包括：符号表、类型解析、调用/数据流分析。

符号表跟踪变量及其使用情况。类型解析试图找到每个使用的类型的实际类类型，跟随方法调用（包括重载和覆盖的方法），允许查询子类型和类型层次结构。这需要对辅助类路径进行额外配置。调用和数据流分析跟踪数据在程序的不同执行路径中的流动。

这些功能超出了本指南的范围。类型解析和数据流是绝对不是免费的功能。它需要很大的努力和毅力来实现。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),u={id:"_1-start-with-a-new-sub-module-✏️️",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#_1-start-with-a-new-sub-module-✏️️","aria-hidden":"true"},"#",-1),m={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},p=e("ul",null,[e("li",null,"See pmd-swift for examples."),e("li",null,[t("Make sure to add your new module to PMD’s parent pom as "),e("code",null,"<module>"),t(" entry, so that it is built alongside the other languages.")]),e("li",null,"Also add your new module to the dependencies list in “pmd-languages-deps/pom.xml”, so that the new language is automatically available in the binary distribution (pmd-dist).")],-1),_={id:"_2-implement-an-ast-parser-for-your-language-✏️️",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#_2-implement-an-ast-parser-for-your-language-✏️️","aria-hidden":"true"},"#",-1),f={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"src/main/antlr4",-1),v=e("code",null,"ast",-1),w={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/antlr4/net/sourceforge/pmd/lang/swift/ast/Swift.g4",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"net.sourceforge.pmd.lang.swift.ast",-1),x=e("li",null,"Configure the options “superClass” and “contextSuperClass”. These are the base classes for the generated classes.",-1),T={id:"_3-create-ast-node-classes-✏️️",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#_3-create-ast-node-classes-✏️️","aria-hidden":"true"},"#",-1),j={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},A=e("li",null,[e("p",null,"The individual AST nodes are generated, but you need to define the common interface for them.")],-1),S={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/antlr4/AntlrNode.java",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"AntlrNode",-1),P={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/SwiftNode.java",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"SwiftNode",-1),M=e("p",null,"Additionally, you need several base classes:",-1),R={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/antlr4/BaseAntlrInnerNode.java",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"BaseAntlrInnerNode",-1),D={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/SwiftInnerNode.java",target:"_blank",rel:"noopener noreferrer"},I=e("code",null,"SwiftInnerNode",-1),F={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/SwiftRootNode.java",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,"SwiftRootNode",-1),B={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/SwiftTerminalNode.java",target:"_blank",rel:"noopener noreferrer"},z=e("code",null,"SwiftTerminalNode",-1),E={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/SwiftErrorNode.java",target:"_blank",rel:"noopener noreferrer"},X=e("code",null,"SwiftErrorNode",-1),U={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/SwiftNameDictionary.java",target:"_blank",rel:"noopener noreferrer"},Y=e("p",null,"Once these base classes exist, you need to change the ANTLR grammar to add additional members via",-1),W=e("div",{class:"language-plaintext line-numbers-mode","data-ext":"plaintext"},[e("pre",{class:"language-plaintext"},[e("code",null,`@parser::members
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),O=e("li",null,[t("Define a package private field "),e("code",null,"DICO"),t(" which creates a new instance of your language name dictionary using the vocabulary from the generated parser ("),e("code",null,"VOCABULARY"),t(").")],-1),G={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/antlr4/AntlrGeneratedParserBase.java",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"AntlrGeneratedParserBase",-1),q=e("code",null,"createPmdTerminal()",-1),J=e("code",null,"createPmdError()",-1),$={href:"https://github.com/pmd/pmd/blob/master/antlr4-wrapper.xml",target:"_blank",rel:"noopener noreferrer"},K=e("code",null,"antlr4-wrapper.xml",-1),Q=e("code",null,"pom.xml",-1),Z={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/pom.xml",target:"_blank",rel:"noopener noreferrer"},ee=e("code",null,"pmd-swift/pom.xml",-1),te=e("li",null,[e("p",null,[t("You can add additional methods in your “InnerNode” (e.g. "),e("code",null,"SwiftInnerNode"),t(") that are available on all nodes. But on most cases you won’t need to do anything.")])],-1),ae={id:"_4-generate-your-parser-using-antlr-✏️️",tabindex:"-1"},ne=e("a",{class:"header-anchor",href:"#_4-generate-your-parser-using-antlr-✏️️","aria-hidden":"true"},"#",-1),re={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},oe=r("<li>Make sure, you have the property <code>&lt;antlr4.visitor&gt;true&lt;/antlr4.visitor&gt;</code> in your <code>pom.xml</code> file.</li><li>This is just a matter of building the language module. ANTLR is called via ant, and this step is added to the phase <code>generate-sources</code>. So you can just call e.g. <code>./mvnw generate-sources -pl pmd-swift</code> to have the parser generated.</li><li>The generated code will be placed under <code>target/generated-sources/antlr4</code> and will not be committed to source control.</li>",3),se={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/pom.xml",target:"_blank",rel:"noopener noreferrer"},le=e("code",null,"pmd-swift/pom.xml",-1),ie={id:"_5-create-a-tokenmanager-✏️️",tabindex:"-1"},de=e("a",{class:"header-anchor",href:"#_5-create-a-tokenmanager-✏️️","aria-hidden":"true"},"#",-1),ce={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},ue=e("li",null,[e("p",null,"This is needed to support CPD (copy paste detection)")],-1),he={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/cpd/impl/AntlrTokenizer.java",target:"_blank",rel:"noopener noreferrer"},me=e("code",null,"AntlrTokenManager",-1),pe={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/cpd/SwiftTokenizer.java",target:"_blank",rel:"noopener noreferrer"},_e=e("code",null,"SwiftTokenizer",-1),ge={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/cpd/impl/AntlrTokenFilter.java",target:"_blank",rel:"noopener noreferrer"},fe=e("code",null,"AntlrTokenFilter",-1),be=e("code",null,"getTokenFilter(AntlrTokenManager)",-1),ve={href:"https://github.com/pmd/pmd/blob/master/pmd-cs/src/main/java/net/sourceforge/pmd/lang/cs/cpd/CsTokenizer.java",target:"_blank",rel:"noopener noreferrer"},we=e("code",null,"CsTokenizer",-1),ye=e("p",null,[t("If you don’t need a custom token filter, you don’t need to override the method. It returns the default "),e("code",null,"AntlrTokenFilter"),t(" which doesn’t filter anything.")],-1),xe={id:"_6-create-a-pmd-parser-adapter-✏️️",tabindex:"-1"},Te=e("a",{class:"header-anchor",href:"#_6-create-a-pmd-parser-adapter-✏️️","aria-hidden":"true"},"#",-1),ke={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},je=e("li",null,"Create your own parser, that adapts the ANLTR interface to PMD’s parser interface.",-1),Ae={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/impl/antlr4/AntlrBaseParser.java",target:"_blank",rel:"noopener noreferrer"},Se=e("code",null,"AntlrBaseParser",-1),Ne={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/PmdSwiftParser.java",target:"_blank",rel:"noopener noreferrer"},Pe=e("code",null,"PmdSwiftParser",-1),Ce={id:"_7-create-a-language-version-handler-✏️️",tabindex:"-1"},Me=e("a",{class:"header-anchor",href:"#_7-create-a-language-version-handler-✏️️","aria-hidden":"true"},"#",-1),Re={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},Le={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/SwiftHandler.java",target:"_blank",rel:"noopener noreferrer"},De=e("code",null,"SwiftHandler",-1),Ie=e("li",null,"This class is sort of a gateway between PMD and all parsing logic specific to your language.",-1),Fe=e("li",null,[t("For a minimal implementation, it just needs to return a parser "),e("em",null,"(see step #6)"),t(".")],-1),Ve=e("li",null,[t("It can be used to provide other features for your language like "),e("ul",null,[e("li",null,"violation suppression logic"),e("li",null,"violation decorators, to add additional language specific information to the created violations"),e("li",null,"metrics"),e("li",null,"custom XPath functions")])],-1),Be={id:"_8-create-a-base-visitor-✏️️",tabindex:"-1"},ze=e("a",{class:"header-anchor",href:"#_8-create-a-base-visitor-✏️️","aria-hidden":"true"},"#",-1),Ee={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},Xe=e("li",null,"A parser visitor adapter is not needed anymore with PMD 7. The visitor interface now provides a default implementation.",-1),Ue={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/ast/AstVisitor.java",target:"_blank",rel:"noopener noreferrer"},Ye=e("code",null,"AstVisitor",-1),We=e("li",null,[t("The generated visitor class for Swift is called "),e("code",null,"SwiftVisitor"),t(".")],-1),Oe={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/ast/SwiftVisitorBase.java",target:"_blank",rel:"noopener noreferrer"},Ge=e("code",null,"SwiftVisitorBase",-1),He={id:"_9-make-pmd-recognize-your-language-✏️️",tabindex:"-1"},qe=e("a",{class:"header-anchor",href:"#_9-make-pmd-recognize-your-language-✏️️","aria-hidden":"true"},"#",-1),Je={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},$e=e("code",null,"net.sourceforge.pmd.lang.impl.SimpleLanguageModuleBase",-1),Ke={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/SwiftLanguageModule.java",target:"_blank",rel:"noopener noreferrer"},Qe=e("code",null,"SwiftLanguageModule",-1),Ze=e("li",null,[t("Add for each version of your language a call to "),e("code",null,"addVersion"),t(" in your language module’s constructor. Use "),e("code",null,"addDefaultVersion"),t(" for defining the default version.")],-1),et=e("li",null,"You’ll need to refer the language version handler created in step #7.",-1),tt=e("li",null,[t("Create the service registration via the text file "),e("code",null,"src/main/resources/META-INF/services/net.sourceforge.pmd.lang.Language"),t(". Add your fully qualified class name as a single line into it.")],-1),at={id:"_10-create-an-abstract-rule-class-for-the-language-✏️️",tabindex:"-1"},nt=e("a",{class:"header-anchor",href:"#_10-create-an-abstract-rule-class-for-the-language-✏️️","aria-hidden":"true"},"#",-1),rt={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},ot=e("li",null,"You need to create your own abstract rule class in order to interface your language with PMD’s generic rule execution.",-1),st={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/rule/AbstractSwiftRule.java",target:"_blank",rel:"noopener noreferrer"},lt=e("code",null,"AbstractSwiftRule",-1),it={href:"https://github.com/pmd/pmd/blob/master/pmd-core/src/main/java/net/sourceforge/pmd/lang/rule/AbstractVisitorRule.java",target:"_blank",rel:"noopener noreferrer"},dt=e("code",null,"AbstractVisitorRule",-1),ct=e("code",null,"buildVisitor()",-1),ut=e("code",null,"SwiftVisitor",-1),ht=e("li",null,[t("All other rules for your language should extend this class. The purpose of this class is to provide a visitor via the method "),e("code",null,"buildVisitor()"),t(" for analyzing the AST. The provided visitor only implements the visit methods for specific AST nodes. The other node types use the default behavior, and you don’t need to care about them.")],-1),mt=e("li",null,"Note: This is different from how it was in PMD 6: Each rule in PMD 6 was itself a visitor (implementing the visitor interface of the specific language). Now the rule just provides a visitor, which can be hidden and potentially shared between rules.",-1),pt={id:"_11-create-rules-✏️️",tabindex:"-1"},_t=e("a",{class:"header-anchor",href:"#_11-create-rules-✏️️","aria-hidden":"true"},"#",-1),gt={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},ft=e("li",null,[e("p",null,"Creating rules is already pretty well documented in PMD - and it’s no different for a new language, except you may have different AST nodes.")],-1),bt=e("li",null,[e("p",null,"PMD supports 2 types of rules, through visitors or XPath.")],-1),vt=e("p",null,"To add a visitor rule:",-1),wt={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/java/net/sourceforge/pmd/lang/swift/rule/bestpractices/UnavailableFunctionRule.java",target:"_blank",rel:"noopener noreferrer"},yt=e("code",null,"Rule",-1),xt={href:"https://docs.pmd-code.org/latest/pmd_userdocs_extending_writing_xpath_rules.html",target:"_blank",rel:"noopener noreferrer"},Tt=r(`<li><p>When creating the category ruleset XML file, the XML can reference build properties that are replaced during the build. This is used for the</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>externalInfoUrl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>attribute of a rule. E.g. we use</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>\${pmd.website.baseurl}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>to point to the correct webpage (depending on the PMD version). In order for this to work, you need to add a resource filtering configuration in the language module’s</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>pom.xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>. Under</p><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>&lt;build&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>add the following lines:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    &lt;resources&gt;
        &lt;resource&gt;
            &lt;directory&gt;\${project.basedir}/src/main/resources&lt;/directory&gt;
            &lt;filtering&gt;true&lt;/filtering&gt;
        &lt;/resource&gt;
    &lt;/resources&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),kt={id:"_14-test-the-rules-✏️️",tabindex:"-1"},jt=e("a",{class:"header-anchor",href:"#_14-test-the-rules-✏️️","aria-hidden":"true"},"#",-1),At={href:"https://github.com/pmd/pmd/blob/master/docs/pages/pmd/devdocs/major_contributions/adding_a_new_antlr_based_language.md",target:"_blank",rel:"noopener noreferrer"},St=e("p",null,"Testing rules is described in depth in",-1),Nt=e("p",null,"Testing your rules",-1),Pt=e("p",null,".",-1),Ct=e("code",null,"PmdRuleTst",-1),Mt={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/test/java/net/sourceforge/pmd/lang/swift/rule/bestpractices/UnavailableFunctionTest.java",target:"_blank",rel:"noopener noreferrer"},Rt=e("code",null,"UnavailableFunctionTest",-1),Lt={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/main/resources/category/swift/bestpractices.xml",target:"_blank",rel:"noopener noreferrer"},Dt=e("code",null,"pmd-swift/src/main/resources/bestpractices.xml",-1),It=e("li",null,"Place the test XML file with the test cases in the correct location",-1),Ft={href:"https://github.com/pmd/pmd/blob/master/pmd-swift/src/test/resources/net/sourceforge/pmd/lang/swift/rule/bestpractices/xml/UnavailableFunction.xml",target:"_blank",rel:"noopener noreferrer"},Vt=e("code",null,"UnavailableFunction.xml",-1),Bt=e("li",null,"This test XML file contains sample pieces of code which should trigger a specified number of violations of this rule. The unit test will execute the rule on this piece of code, and verify that the number of violations matches.",-1),zt=e("li",null,[e("p",null,[t("To verify the validity of all the created rulesets, create a subclass of "),e("code",null,"AbstractRuleSetFactoryTest"),t(" ("),e("em",null,[t("see "),e("code",null,"RuleSetFactoryTest"),t(" in pmd-swift for example)")]),t(". This will load all rulesets and verify, that all required attributes are provided.")]),e("p",null,[e("em",null,"Note:"),t(" You’ll need to add your ruleset to "),e("code",null,"categories.properties"),t(", so that it can be found.")])],-1);function Et(Xt,Ut){const a=s("ExternalLinkIcon");return l(),i("div",null,[c,e("h2",u,[h,t(" 1. Start with a new sub-module "),e("a",m,[t("✏️️"),n(a)])]),p,e("h2",_,[g,t(" 2. Implement an AST parser for your language "),e("a",f,[t("✏️️"),n(a)])]),e("ul",null,[e("li",null,[t("ANTLR will generate the parser for you based on the grammar file. The grammar file needs to be placed in the folder "),b,t(" in the appropriate sub package "),v,t(" of the language. E.g. for swift, the grammar file is "),e("a",w,[t("Swift.g4"),n(a)]),t(" and is placed in the package "),y,t(".")]),x]),e("h2",T,[k,t(" 3. Create AST node classes "),e("a",j,[t("✏️️"),n(a)])]),e("ul",null,[A,e("li",null,[e("p",null,[t("You need to define the supertype interface for all nodes of the language. For that, we provide "),e("a",S,[N,n(a)]),t(".")])]),e("li",null,[e("p",null,[t("See "),e("a",P,[C,n(a)]),t(" as an example.")])]),e("li",null,[M,e("ul",null,[e("li",null,[t("a language specific inner node - these nodes represent the production rules from the grammar. In Antlr, they are called “ParserRuleContext”. We call them “InnerNode”. Use the base class from pmd-core "),e("a",R,[L,n(a)]),t(" . And example is "),e("a",D,[I,n(a)]),t(". Note that this language specific inner node is package-private, as it is only the base class for the concrete nodes generated by ANLTR.")]),e("li",null,[t("a language specific root node - this provides the root of the AST and our parser will return subtypes of this node. The root node itself is a “InnerNode”. See "),e("a",F,[V,n(a)]),t(". Note that this language specific root node is package-private, as it is only the base class for the concrete node generated by ANLTR.")]),e("li",null,[t("a language specific terminal node. See "),e("a",B,[z,n(a)]),t(".")]),e("li",null,[t("a language specific error node. See "),e("a",E,[X,n(a)]),t(".")]),e("li",null,[t("a language name dictionary. This is used to convert ANTLR node names to useful XPath node names. See "),e("a",U,[t("`SwiftNameDictionary’"),n(a)]),t(".")])])]),e("li",null,[Y,W,e("ul",null,[O,e("li",null,[t("Define two additional methods to help converting the ANTLR context objects into PMD AST nodes. The methods are abstract in "),e("a",G,[H,n(a)]),t(" and need to be implemented here for the concrete language: "),q,t(" and "),J,t(".")])])]),e("li",null,[e("p",null,[t("In order for the generated code to match and use our custom classes, we have a common ant script, that fiddles with the generated code. The ant script is "),e("a",$,[K,n(a)]),t(" and does not need to be adjusted - it has plenty of parameters that can be configured. The ant script is added in the language module’s "),Q,t(" where the parameters are set (e.g. name of root name class). Have a look at Swift’s example: "),e("a",Z,[ee,n(a)]),t(".")])]),te]),e("h2",ae,[ne,t(" 4. Generate your parser (using ANTLR) "),e("a",re,[t("✏️️"),n(a)])]),e("ul",null,[oe,e("li",null,[t("You should review "),e("a",se,[le,n(a)]),t(".")])]),e("h2",ie,[de,t(" 5. Create a TokenManager "),e("a",ce,[t("✏️️"),n(a)])]),e("ul",null,[ue,e("li",null,[e("p",null,[t("We provide a default implementation using "),e("a",he,[me,n(a)]),t(".")])]),e("li",null,[e("p",null,[t("You must create your own “AntlrTokenizer” such as we do with "),e("a",pe,[_e,n(a)]),t(".")])]),e("li",null,[e("p",null,[t("If you wish to filter specific tokens (e.g. comments to support CPD suppression via “CPD-OFF” and “CPD-ON”) you can create your own implementation of "),e("a",ge,[fe,n(a)]),t(". You’ll need to override then the protected method "),be,t(" and return your custom filter. See the tokenizer for C# as an exmaple: "),e("a",ve,[we,n(a)]),t(".")]),ye])]),e("h2",xe,[Te,t(" 6. Create a PMD parser “adapter” "),e("a",ke,[t("✏️️"),n(a)])]),e("ul",null,[je,e("li",null,[t("We provide a "),e("a",Ae,[Se,n(a)]),t(" implementation that you need to extend to create your own adapter as we do with "),e("a",Ne,[Pe,n(a)]),t(".")])]),e("h2",Ce,[Me,t(" 7. Create a language version handler "),e("a",Re,[t("✏️️"),n(a)])]),e("ul",null,[e("li",null,[t("Now you need to create your version handler, as we did with "),e("a",Le,[De,n(a)]),t(".")]),Ie,Fe,Ve]),e("h2",Be,[ze,t(" 8. Create a base visitor "),e("a",Ee,[t("✏️️"),n(a)])]),e("ul",null,[Xe,e("li",null,[t("The visitor for ANTLR based AST is generated along the parser from the ANTLR grammar file. The base interface for a visitor is "),e("a",Ue,[Ye,n(a)]),t(".")]),We,e("li",null,[t("In order to help use this visitor later on, a base visitor class should be created. See "),e("a",Oe,[Ge,n(a)]),t(" as an example.")])]),e("h2",He,[qe,t(" 9. Make PMD recognize your language "),e("a",Je,[t("✏️️"),n(a)])]),e("ul",null,[e("li",null,[t("Create your own subclass of "),$e,t(", see Swift as an example: "),e("a",Ke,[Qe,n(a)]),t(".")]),Ze,et,tt]),e("h2",at,[nt,t(" 10. Create an abstract rule class for the language "),e("a",rt,[t("✏️️"),n(a)])]),e("ul",null,[ot,e("li",null,[t("See "),e("a",st,[lt,n(a)]),t(" as an example.")]),e("li",null,[t("The rule basically just extends "),e("a",it,[dt,n(a)]),t(" and only redefines the abstract "),ct,t(" method to return our own type of visitor. In this case our "),ut,t(" is used. While there is no real functionality added, every language should have its own base class for rules. This helps to organize the code.")]),ht,mt]),e("h2",pt,[_t,t(" 11. Create rules "),e("a",gt,[t("✏️️"),n(a)])]),e("ul",null,[ft,bt,e("li",null,[vt,e("ul",null,[e("li",null,[t("You need to extend the abstract rule you created on the previous step, you can use the swift rule "),e("a",wt,[t("UnavailableFunctionRule"),n(a)]),t(" as an example. Note, that all rule classes should be suffixed with "),yt,t(" and should be placed in a package the corresponds to their category.")])])]),e("li",null,[e("p",null,[t("To add an XPath rule you can follow our guide "),e("a",xt,[t("Writing XPath Rules"),n(a)]),t(".")])]),Tt]),e("h2",kt,[jt,t(" 14. Test the rules "),e("a",At,[t("✏️️"),n(a)])]),e("ul",null,[e("li",null,[St,Nt,Pt,e("ul",null,[e("li",null,[t("Each rule has its own test class: Create a test class for your rule extending "),Ct,t(),e("em",null,[t("(see "),e("a",Mt,[Rt,n(a)]),t(" for example)")])]),e("li",null,[t("Create a category rule set for your language "),e("em",null,[t("(see "),e("a",Lt,[Dt,n(a)]),t(" for example)")])]),It,e("li",null,[t("When executing the test class "),e("ul",null,[e("li",null,[t("this triggers the unit test to read the corresponding XML file with the rule test data "),e("em",null,[t("(see "),e("a",Ft,[Vt,n(a)]),t(" for example)")])]),Bt])])])]),zt])])}const Wt=o(d,[["render",Et],["__file","3支持新语言(ANTLR).html.vue"]]);export{Wt as default};
